#pragma once

/// Header file for the PEmitter class.
/// @author Daniel Tabar
/// data@datarealms.com
/// http://www.datarealms.com
/// Inclusions of header files
#include "MOSParticle.h"
#include "Emission.h"
#include "SoundContainer.h"

namespace RTE {

	/// A particle MO that creates and emits particle MOs.
	class PEmitter : public MOSParticle {

		/// Public member variable, method and friend function declarations
	public:
		friend struct EntityLuaBindings;

		// Concrete allocation and cloning definitions
		EntityAllocation(PEmitter);
		SerializableOverrideMethods;
		ClassInfoGetters;

		/// Constructor method used to instantiate a PEmitter object in system
		/// memory. Create() should be called before using the object.
		PEmitter();

		/// Destructor method used to clean up a PEmitter object before deletion
		/// from system memory.
		~PEmitter() override;

		/// Makes the PEmitter object ready for use.
		/// @return An error return value signaling sucess or any particular failure.
		/// Anything below 0 is an error signal.
		int Create() override;

		/// Creates a PEmitter to be identical to another, by deep copy.
		/// @param reference A reference to the PEmitter to deep copy.
		/// @return An error return value signaling sucess or any particular failure.
		/// Anything below 0 is an error signal.
		int Create(const PEmitter& reference);

		/// Resets the entire PEmitter, including its inherited members, to their
		/// default settings or values.
		void Reset() override {
			Clear();
			MOSParticle::Reset();
		}

		/// Destroys and resets (through Clear()) the SceneLayer object.
		/// @param notInherited Whether to only destroy the members defined in this derived class, or (default: false)
		/// to destroy all inherited members also.
		void Destroy(bool notInherited = false) override;

		/// Indicates whether this PEmitter is currently enabled and emitting.
		/// @return Whether it's emitting or not.
		bool IsEmitting() const { return m_EmitEnabled; }

		/// Returns whether this emitter was emitting last frame.
		/// @return Whether this emitter was emitting last frame.
		bool WasEmitting() const { return m_WasEmitting; }

		/// Reset the timers of all emissions so they will start/stop at the
		/// correct relative offsets from now.
		void ResetEmissionTimers();

		/// Sets this PEmitter to start emitting at the set rate, or to stop.
		/// @param enable Whether to enable or disable emission. (default: true)
		void EnableEmission(bool enable = true);

		/// Calculates the forces this emitter applies on any parent.
		/// @param burst Whether to calculate a burst update or not. (default: false)
		/// @return The approximate impulse generated by the emitter.
		float EstimateImpulse(bool burst = false);

		/*
		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          GetEmitRate
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Gets the rate at which this PEmitter emits its particles.
		// Arguments:       None.
		// Return value:    A float with the rate in #/min.

		float GetEmitRate() const { return m_PPM; }


		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          GetBurstCount
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Gets the number of particles that will be emitted in one shot upon
		//                  a triggered burst of this PEmitter.
		// Arguments:       None.
		// Return value:    The number of emitted particles a burst should have. 0 means burst
		//                  are disabled.

		int GetBurstCount() const { return m_BurstSize; }
		*/

		/// Gets the scale factor that will be applied to the regular spread and
		/// emission velocity to get the burst particle parameters.
		/// @return The scale factor.
		float GetBurstScale() const { return m_BurstScale; }

		/// Gets the angle of direction that the emitted particles will be shot at.
		/// @return A float with the angle in radians.
		float GetEmitAngle() const { return m_EmitAngle.GetRadAngle(); }

		/// A vector in the direction, including the rotation of the emitter, that
		/// the emitted particles will be shot at.
		/// @return A unit vector.
		Vector GetEmitVector() const { return Vector(1, 0).RadRotate(m_HFlipped ? c_PI + m_Rotation.GetRadAngle() - m_EmitAngle.GetRadAngle() : m_Rotation.GetRadAngle() + m_EmitAngle.GetRadAngle()); }

		/// A vector in the opposite direction, including the rotation of the
		/// emitter, that the emitted particles will be shot at.
		/// @return A unit vector.
		Vector GetRecoilVector() const { return Vector(-1, 0).RadRotate(m_HFlipped ? c_PI + m_Rotation.GetRadAngle() - m_EmitAngle.GetRadAngle() : m_Rotation.GetRadAngle() + m_EmitAngle.GetRadAngle()); }

		/// Gets the BurstSpacing for this emitter.
		/// @return The BurstSpacing in ms.
		float GetBurstSpacing() const { return m_BurstSpacing; }

		/*
		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          GetEmitSpread
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Gets the angle spread of velocity of the emitted MO's to each side of
		//                  the angle of emission of this PEmitter.
		// Arguments:       None.
		// Return value:    A float with the spread in r's. PI/2 would mean that MO's fly out to
		//                  one side only, with the m_EmitAngle defining the middle of that half
		//                  circle.

		float GetEmitSpread() const { return m_Spread; }


		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          GetEmitVelMin
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Gets the min end of the range the velocity of a particle being emitted
		//                  by this PEmitter can have.
		// Arguments:       None.
		// Return value:    A float with the min vel possible for an emitted particle.

		float GetEmitVelMin() const { return m_MinVelocity; }


		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          GetEmitVelMax
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Gets the max end of the range the velocity of a particle being emitted
		//                  by this PEmitter can have.
		// Arguments:       None.
		// Return value:    A float with the max vel possible for an emitted particle.

		float GetEmitVelMax() const { return m_MaxVelocity; }
		*/

		/// Gets the normalized throttle scalar which controls how to affect the
		/// emission rate as per the emisison rate range. Depricated for Lua, use
		/// the Throttle property instead.
		/// @return A float with the normalized throttle scalar. 1.0 means max throttle,
		/// 0 means normal, -1.0 means least emission rate.
		float GetThrottle() const { return m_Throttle; }

		/// Gets the adjusted throttle multiplier that is factored into the emission rate of this PEmitter.
		/// @return The throttle strength as a multiplier.
		float GetThrottleFactor() const { return LERP(-1.0f, 1.0f, m_NegativeThrottleMultiplier, m_PositiveThrottleMultiplier, m_Throttle); }

		/// Gets the throttle value that will achieve a given throttle factor that is factored into the emission rate of this AEmitter.
		/// @return The throttle value that will achieve the given throttle factor.
		float GetThrottleForThrottleFactor(float throttleFactor) const { return LERP(m_NegativeThrottleMultiplier, m_PositiveThrottleMultiplier, -1.0f, 1.0f, throttleFactor); }

		/*
		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          SetEmitRate
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Sets the rate at which this PEmitter emits its particles.
		// Arguments:       A float with the rate in #/min.
		// Return value:    None.

		void SetEmitRate(const float rate) { m_PPM = rate; }


		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          SetBurstCount
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Sets the number of particles that will be emitted in one shot upon
		//                  a triggered burst of this PEmitter.
		// Arguments:       The number of emitted particles a burst should have. 0 means burst
		//                  are disabled.
		// Return value:    None.

		void SetBurstCount(const int count) { m_BurstSize = count; }
		*/

		/// Sets the scale factor that will be applied to the regular spread and
		/// emission velocity to get the burst particle parameters.
		/// @param scale The scale factor.
		void SetBurstScale(const float scale) { m_BurstScale = scale; }

		/// Sets the BurstSpacing for this emitter.
		/// @param spacing The BurstSpacing in ms.
		void SetBurstSpacing(const float spacing) { m_BurstSpacing = spacing; }

		/// Sets the display scale factor of the flash effect. This is purely
		/// visual.
		/// @param flashScale The scale factor of the flash draw. (default: 1.0f)
		void SetFlashScale(float flashScale = 1.0f) { m_FlashScale = flashScale; }

		/// Gets the display scale factor of the flash effect. This is purely visual.
		/// @return The scale factor of the flash draw.
		float GetFlashScale() const { return m_FlashScale; }

		/// Sets the angle of direction that the emitted particles will be shot at.
		/// @param m_EmitAngle.SetRadAngle(angle A float with the angle in radians.
		void SetEmitAngle(const float angle) { m_EmitAngle.SetRadAngle(angle); }

		/// Sets the normalized throttle scalar which controls how to affect the
		/// emission rate as per the emisison rate range.
		/// @param m_Throttle A float with the normalized throttle scalar. 1.0 means max throttle, (default: throttle > 1.0f ? 1.0f : (throttle < -1.0f ? -1.0f : throttle)
		/// 0 means normal, -1.0 means least emission rate.
		void SetThrottle(float throttle) { m_Throttle = throttle > 1.0f ? 1.0f : (throttle < -1.0f ? -1.0f : throttle); }

		/*
		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          SetEmitSpread
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Sets the angle spread of velocity of the emitted MO's to each side of
		//                  angle of emission of this PEmitter.
		// Arguments:       A float with the spread in r's. PI/2 would mean that MO's fly out to
		//                  one side only, with the m_EmitAngle defining the middle of that half
		//                  circle.
		// Return value:    None.

		void SetEmitSpread(const float spread) { m_Spread = spread; }


		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          SetEmitVelMin
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Sets the min end of the range the velocity of a particle being emitted
		//                  by this PEmitter can have.
		// Arguments:       A float with the min vel possible for an emitted particle.
		// Return value:    None.

		void SetEmitVelMin(const float minVel) { m_MinVelocity = minVel; }


		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          SetEmitVelMax
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Sets the max end of the range the velocity of a particle being emitted
		//                  by this PEmitter can have.
		// Arguments:       A float with the max vel possible for an emitted particle.
		// Return value:    None.

		void SetEmitVelMax(const float maxVel) { m_MaxVelocity = maxVel; }
		*/

		/// Triggers a one-shot burst of emissions in the number that has
		/// previously been set. The burst will happen during the next Update of
		/// this PEmitter.
		void TriggerBurst() { m_BurstTriggered = true; }

		/// Checks if it is possible to trigger a one-shot burst of emissions during
		/// the next Update of this PEmitter.
		/// @return If it is possible to trigger a burst.
		bool CanTriggerBurst() {
			if (m_BurstSpacing <= 0 || m_BurstTimer.IsPastSimMS(m_BurstSpacing))
				return true;
			return false;
		}

		/// Indicates whether this PEmitter is set to burst next update or not.
		/// @return Whether a burst is gonna happen or not..
		bool IsSetToBurst() const { return m_BurstTriggered; }

		/// Registers a new AlarmEvent if this emitter has a loudness above zero.
		/// @param Team Team that will ignore this AlarmEvent.
		void AlarmOnEmit(int Team) const {
			if (m_LoudnessOnEmit > 0)
				g_MovableMan.RegisterAlarmEvent(AlarmEvent(m_Pos, Team, m_LoudnessOnEmit));
		}

		/// Resest all the timers used by this. Can be emitters, etc. This is to
		/// prevent backed up emissions to come out all at once while this has been
		/// held dormant in an inventory.
		void ResetAllTimers() override {
			m_BurstTimer.Reset();
			m_LastEmitTmr.Reset();
		}

		/// Updates this MovableObject. Supposed to be done every frame.
		void Update() override;
		void PostUpdate() override { MOSParticle::PostUpdate(); }

		/// Draws this PEmitter's current graphical representation to a
		/// BITMAP of choice.
		/// @param pTargetBitmap A pointer to a BITMAP to draw on.
		/// @param targetPos The absolute position of the target bitmap's upper left corner in the Scene. (default: Vector())
		/// @param mode In which mode to draw in. See the DrawMode enumeration for the modes. (default: g_DrawColor)
		/// @param onlyPhysical Whether to not draw any extra 'ghost' items of this MovableObject, (default: false)
		/// indicator arrows or hovering HUD text and so on.
		void Draw(BITMAP* pTargetBitmap, const Vector& targetPos = Vector(), DrawMode mode = g_DrawColor, bool onlyPhysical = false) const override;

		/// Gets the number of emissions left before emitter is disabled.
		/// @return The number of emissions left before emitter is disabled.
		long GetEmitCountLimit() const { return m_EmitCountLimit; }

		/// Sets the number of emissions left before emitter is disabled.
		/// @param newValue New number of emissions left.
		void SetEmitCountLimit(long newValue) { m_EmitCountLimit = newValue; }

		/// Returns whether this emitter just started emitting this frame.
		/// @return Whether this emitter just started emitting this frame.
		bool JustStartedEmitting() const { return !m_WasEmitting && m_EmitEnabled; }

		/// Protected member variable and method declarations
	protected:
		// Member variables
		static Entity::ClassInfo m_sClass;

		// The list of MO instances that get emitted
		std::vector<Emission> m_EmissionList;
		// Sounds
		SoundContainer m_EmissionSound;
		SoundContainer m_BurstSound;
		SoundContainer m_EndSound;
		// Whether emitting is currently enabled or not.
		bool m_EmitEnabled;
		// Whether or not the it was emitting last frame or not.
		bool m_WasEmitting;
		// The number of emissions emitted since emission was last enabled
		long m_EmitCount;
		// The max number of emissions to emit per emit being enabled
		long m_EmitCountLimit;
		float m_NegativeThrottleMultiplier; //!< The multiplier applied to the emission rate when throttle is negative. Relative to the absolute throttle value.
		float m_PositiveThrottleMultiplier; //!< The multiplier applied to the emission rate when throttle is positive. Relative to the absolute throttle value.
		// The normalized throttle which controls the MSPE between 1.0 * m_MSPERange and -1.0 * m_MSPERange. 0 means emit the regular m_PPM amount.
		float m_Throttle;
		// Whether or not this' emissions ignore hits with itself, even if they are set to hit other MOs.
		bool m_EmissionsIgnoreThis;
		// The scale factor that will be applied to the regular spread and emission
		// velocity to get the the burst particle parameters.
		float m_BurstScale;
		// Indicates that a burst is set to happen during the next Update.
		bool m_BurstTriggered;
		// The shortest possible time between bursts, in ms
		float m_BurstSpacing;
		// Measures the shortest possible time between bursts
		Timer m_BurstTimer;
		// The angle of the direction the emitted particles will head in.
		// The m_Roataion of this PEmitter will be added to this angle.
		Matrix m_EmitAngle;
		// Offset of the emission point from this' sprite center, which gets rotated with this
		Vector m_EmissionOffset;
		// Timer for timing how long ago the last particle was emitted. 0 means no limit.
		Timer m_LastEmitTmr;
		// Flash offset.
		//    Vector m_FlashOff; nah dont need it
		// Flash display scale
		float m_FlashScale;
		// How large impulse this emitter generates when bursting
		float m_AvgBurstImpulse;
		// How large impulse this emitter generates when firing
		float m_AvgImpulse;
		// How far this is audiable (in screens) when emitting as a jetpack or craft engine
		float m_LoudnessOnEmit;
		// Whether to only display flash on bursts, and not on any emission frame.
		bool m_FlashOnlyOnBurst;
		// Whether the burst sound should always play until completion, or whether it stops when this emitter stops emitting
		bool m_SustainBurstSound;
		// Whether the burst sound follows the emitter
		bool m_BurstSoundFollowsEmitter;

		/// Private member variable and method declarations
	private:
		/// Clears all the member variables of this PEmitter, effectively
		/// resetting the members of this abstraction level only.
		void Clear();

		// Disallow the use of some implicit methods.
		PEmitter(const PEmitter& reference) = delete;
		PEmitter& operator=(const PEmitter& rhs) = delete;
	};

} // namespace RTE
